<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>bss.tv</groupId>
	<artifactId>bss</artifactId>
	<version>2016.12.0-SNAPSHOT</version>
	<name>bss</name>
	<description>bss: Parent</description>
	<packaging>pom</packaging>

	<properties>
		<version.wildfly-swarm>${project.version}</version.wildfly-swarm>
		<maven.min.version>3.2.1</maven.min.version>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<repositories>
		<repository>
			<id>projectodd-snapshots</id>
			<name>Project:odd Snapshots from CI</name>
			<url>https://repository-projectodd.forge.cloudbees.com/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>jboss-public-repository-group</id>
			<name>JBoss Public Repository Group</name>
			<url>http://repository.jboss.org/nexus/content/groups/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>projectodd-snapshots</id>
			<name>Project:odd Snapshots from CI</name>
			<url>https://repository-projectodd.forge.cloudbees.com/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>

		<!-- needed until the latest version of gradle-maven-plugin is released 
			to central: https://github.com/LendingClub/gradle-maven-plugin/issues/25 -->
		<pluginRepository>
			<id>spring</id>
			<name>Spring releases</name>
			<url>http://repo.spring.io/libs-release-remote/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<build>
		<finalName>${project.artifactId}</finalName>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.wildfly.swarm</groupId>
					<artifactId>wildfly-swarm-plugin</artifactId>
					<version>${version.wildfly-swarm}</version>
					<configuration>
						<jvmArguments>
							<jvmArgument>-Xmx128m</jvmArgument>
						</jvmArguments>
					</configuration>
					<executions>
						<execution>
							<id>package</id>
							<goals>
								<goal>package</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.0.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version>
				</plugin>
				<!-- Maven Failsafe Plugin. The Failsafe Plugin is designed to run integration 
					tests while the Surefire Plugin is designed to run unit tests. The name (failsafe) 
					was chosen both because it is a synonym of surefire and because it implies 
					that when it fails, it does so in a safe way. -->
				<plugin>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>2.19.1</version>
				</plugin>
				<!-- Maven Surefire Plugin. The Surefire Plugin is used during the test 
					phase of the build lifecycle to execute the unit tests of an application. 
					It generates reports in two different file formats: Plain text files (*.txt) -->
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.19.1</version>
					<!-- <configuration> <skip>${skipLiquibaseRun}</skip> </configuration> -->
				</plugin>
				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.6</version>
					<!-- <configuration>
						<packagingExcludes>WEB-INF/web.xml</packagingExcludes>
					</configuration> -->
				</plugin>

				<!-- cobertura-maven-pluginApache. This is the Mojo's Maven plugin for 
					Cobertura. Cobertura is a free Java tool that calculates the percentage of 
					code accessed by tests. It can be used to identify which parts of your Java 
					program are lacking test coverage. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>1.10</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/it/java</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-resource</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-test-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>src/it/resources</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<includes>
						<include>**/*IT.java</include>
					</includes>
					<systemPropertyVariables>
						<phantomjs.binary.version>2.1.1</phantomjs.binary.version>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- Arquillian is an innovative and highly extensible 
			testing platform for the JVM that enables developers 
			to easily create automated integration, 
			functional and acceptance tests for Java middleware. -->	
		<dependency>
			<groupId>org.wildfly.swarm</groupId>
			<artifactId>arquillian</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.graphene</groupId>
			<artifactId>graphene-webdriver</artifactId>
			<version>2.1.0.Alpha2</version>
			<type>pom</type>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.wildfly.swarm</groupId>
				<artifactId>bom-all</artifactId>
				<version>${project.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>1.1.10.Final</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.arquillian.extension</groupId>
				<artifactId>arquillian-drone-bom</artifactId>
				<version>2.0.0.Alpha4</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>bss.tv</groupId>
				<artifactId>bsstestbase</artifactId>
				<version>${project.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.12</version>
				<scope>test</scope>
			</dependency>


			<dependency>
				<groupId>org.wildfly.swarm</groupId>
				<artifactId>arquillian-daemon</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>org.wildfly.swarm</groupId>
				<artifactId>arquillian-daemon-modules</artifactId>
				<version>${project.version}</version>
			</dependency>
			
			
		
		</dependencies>
	</dependencyManagement>

	<modules>
		<module>bsstestbase</module>
		<module>bssdtv</module>
	</modules>

	<profiles>
		<profile>
			<id>uberjar</id>
			<properties>
				<wildfly-swarm.useUberJar>true</wildfly-swarm.useUberJar>
			</properties>
		</profile>
		<profile>
			<id>not-skipping-tests</id>
			<activation>
				<property>
					<name>!skipTests</name>
				</property>
			</activation>
			<properties> <skipLiquibaseRun>true</skipLiquibaseRun> </properties>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.wildfly.swarm</groupId>
							<artifactId>wildfly-swarm-plugin</artifactId>
							<version>${version.wildfly-swarm}</version>
							<!-- <executions>
								<execution>
									<id>start</id>
									<phase>pre-integration-test</phase>
									<goals>
										<goal>start</goal>
									</goals>
									<configuration>
										<stdoutFile>target/stdout.log</stdoutFile>
										<stderrFile>target/stderr.log</stderrFile>
									</configuration>
								</execution>
								<execution>
									<id>stop</id>
									<phase>post-integration-test</phase>
									<goals>
										<goal>stop</goal>
									</goals>
								</execution>
							</executions> -->
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>

</project>
